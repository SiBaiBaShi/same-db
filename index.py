# coding:utf-8import timeimport MySQLdbimport enviromentdef build(table_name, url):    table_id = enviroment.ID[table_name.decode('gbk')]    db = MySQLdb.connect(enviroment.DB_INFO['host'],                         enviroment.DB_INFO['user'],                         enviroment.DB_INFO['password'],                         enviroment.DB_INFO['database'],                         charset=enviroment.DB_INFO['charset'])    try:        response = enviroment.get_same_info(url)        while 'next' in response.json()['data']:            for text in response.json()['data']['results']:                insert_data(text, db, table_id)            url = 'https://v2.same.com' + response.json()['data']['next']            response = enviroment.get_same_info(url)        for text in response.json()['data']['results']:            insert_data(text, db, table_id)    finally:        db.close()def update(channel_list):    total = 0         # 总更新数    channel_num = {}  # 各频道更新数    db = MySQLdb.connect("59.110.136.121", "root", ">#hM%K4*", "same", charset='utf8')    # 设今日是A号，设A-4号的最后一张图片的ID为更新终止ID    local_time = time.localtime(time.time())    few_days_ago = time.mktime([local_time.tm_year, local_time.tm_mon,                               local_time.tm_mday-3, 0, 0, 0, 0, 0, 0])    if channel_list == 'all':        channel_list = enviroment.CHANNEL    else:        channel_list = [channel_list.decode('gbk')]    for channel in channel_list:        num = 0        print channel.encode('gbk')        channel_id = enviroment.ID[channel]        sql = 'select id from channel_mark_id where channel = {d}{channel_name}{d};'\            .format(channel_name='c' + str(channel_id),                    d='\'')        end_id = enviroment.operate_sql(db, sql)[0][0]        finish = 1   # 标记是否抵达终止ID        mark = True  # 标记是否可以更新数据库中的终止ID；更新一次后其值变为否        url = enviroment.URL[channel]        response = enviroment.get_same_info(url)        results = response.json()['data']['results']        while finish:            for text in results:                if text['id'] <= end_id:                    finish = 0                    break                else:                    if text['photo']:                        insert_data(text, db, channel_id)                        total += 1                        num += 1                    if mark:                        if text['created_at'] < few_days_ago:                            mark = False                            sql = "update channel_mark_id set id = {id} " \                                  "where channel = {d}{channel_name}{d};"\                                .format(id=text['id'],                                        channel_name='c' + str(channel_id),                                        d='\'')                            enviroment.operate_sql(db, sql)            if finish:                next_url = 'https://v2.same.com' + response.json()['data']['next']                response = enviroment.get_same_info(next_url)                results = response.json()['data']['results']        channel_num[channel] = num    db.close()    for channel in channel_list:        print channel.encode('gbk'), channel_num[channel]    print '\ntotal update:', totaldef insert_data(photo, db, channel_id):    channel_command = \        "replace into {table_name} " \        "(id, user_id, time, likes, views, sex, photo, created_at) " \        "values " \        "({id}, {user_id}, FROM_UNIXTIME({time}), {likes}, " \        "{views}, {sex}, {d}{photo}{d}, {created_at});".\        format(            table_name='c' + str(channel_id),            id=photo['id'], user_id=photo['user']['id'],            time=photo['created_at'], photo=photo['photo'],            likes=photo['likes'], views=photo['views'],            sex=photo['user']['sex'], created_at=photo['created_at'],            d='\"')    user_info = photo['user']    user_command = \        "replace into user" \        "(user_id, time, created_at, sex, city_id, " \        "latest_area_change_at, timezone, password_set, firstblood) " \        "values " \        "({user_id}, FROM_UNIXTIME({time}), {created_at}, {sex}, {city_id}, " \        "{d}{latest_area_change_at}{d}, {d}{timezone}{d}, {d}{password_set}{d}, {firstblood});". \        format(            user_id=user_info['id'],            time=user_info['created_at'],            created_at=user_info['created_at'],            sex=user_info['sex'],            city_id=user_info['meta']['city_id'] if 'city_id' in user_info['meta'] else -1,            latest_area_change_at=user_info['meta']['latest_area_change_at']            if 'latest_area_change_at' in user_info['meta'] else '0-0-0 0:0:0',            timezone=user_info['timezone'],            is_active=user_info['is_active'],            firstblood=user_info['meta']['firstblood'],            password_set=user_info['meta']['password_set'],            d='\"')    enviroment.operate_sql(db, channel_command)    enviroment.operate_sql(db, user_command)    print photo['id']